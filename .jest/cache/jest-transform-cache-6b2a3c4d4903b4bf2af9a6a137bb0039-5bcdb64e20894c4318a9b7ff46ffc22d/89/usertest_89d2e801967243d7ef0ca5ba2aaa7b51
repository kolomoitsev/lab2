13379db866559cbb41b400f025ccd027
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_extended_1 = require("jest-mock-extended");
const user_controller_1 = require("../controllers/user.controller");
const config_1 = require("../config");
const mongoose = require('mongoose');
jest.setTimeout(30000);
describe('Testing user controller', () => {
    it('testing finding user', (done) => __awaiter(void 0, void 0, void 0, function* () {
        const MONGODB_LINK = config_1.config.MONGOOSE_LINK;
        mongoose.connect(MONGODB_LINK, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        })
            .catch((err) => console.log(err));
        mongoose.connection.once('open')
            .on('error', () => {
            console.log('connection error');
        });
        const userController = new user_controller_1.UserController();
        const user = (0, jest_mock_extended_1.mock)();
        const pavlo = yield userController.findUser('pavlo.kolomoitsev@nure.ua');
        expect(pavlo).toBeInstanceOf(user);
        mongoose.disconnect();
        mongoose.connection.once('close');
        done();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FwcGxlL0Rlc2t0b3AvcGVyc29uYWwvdW5pL3Rlc3RpbmcvbGFiMi9zcmMvdGVzdHMvdXNlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsMkRBQTBDO0FBQzFDLG9FQUFnRTtBQUNoRSxzQ0FBbUM7QUFFbkMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFdkIsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBTyxJQUFJLEVBQUUsRUFBRTtRQUN0QyxNQUFNLFlBQVksR0FBRyxlQUFNLENBQUMsYUFBYSxDQUFDO1FBRTFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzNCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGtCQUFrQixFQUFFLElBQUk7U0FDM0IsQ0FBQzthQUNHLEtBQUssQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTNDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUMzQixFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUMsQ0FBQztRQUVQLE1BQU0sY0FBYyxHQUFHLElBQUksZ0NBQWMsRUFBRSxDQUFDO1FBQzVDLE1BQU0sSUFBSSxHQUFHLElBQUEseUJBQUksR0FBUyxDQUFDO1FBQzNCLE1BQU0sS0FBSyxHQUFHLE1BQU0sY0FBYyxDQUFDLFFBQVEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RCLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xDLElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcHBsZS9EZXNrdG9wL3BlcnNvbmFsL3VuaS90ZXN0aW5nL2xhYjIvc3JjL3Rlc3RzL3VzZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVXNlciB9IGZyb20gJy4uL3R5cGVzL3VzZXIudHlwZXMnO1xuaW1wb3J0IHsgbW9jayB9IGZyb20gJ2plc3QtbW9jay1leHRlbmRlZCc7XG5pbXBvcnQgeyBVc2VyQ29udHJvbGxlciB9IGZyb20gJy4uL2NvbnRyb2xsZXJzL3VzZXIuY29udHJvbGxlcic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5qZXN0LnNldFRpbWVvdXQoMzAwMDApO1xuXG5kZXNjcmliZSgnVGVzdGluZyB1c2VyIGNvbnRyb2xsZXInLCAoKSA9PiB7XG4gICAgaXQoJ3Rlc3RpbmcgZmluZGluZyB1c2VyJywgYXN5bmMgKGRvbmUpID0+IHtcbiAgICAgICAgY29uc3QgTU9OR09EQl9MSU5LID0gY29uZmlnLk1PTkdPT1NFX0xJTks7XG5cbiAgICAgICAgbW9uZ29vc2UuY29ubmVjdChNT05HT0RCX0xJTkssIHtcbiAgICAgICAgICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZSxcbiAgICAgICAgICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnI6IGFueSkgPT4gY29uc29sZS5sb2coZXJyKSk7XG5cbiAgICAgICAgbW9uZ29vc2UuY29ubmVjdGlvbi5vbmNlKCdvcGVuJylcbiAgICAgICAgICAgIC5vbignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Nvbm5lY3Rpb24gZXJyb3InKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHVzZXJDb250cm9sbGVyID0gbmV3IFVzZXJDb250cm9sbGVyKCk7XG4gICAgICAgIGNvbnN0IHVzZXIgPSBtb2NrPElVc2VyPigpO1xuICAgICAgICBjb25zdCBwYXZsbyA9IGF3YWl0IHVzZXJDb250cm9sbGVyLmZpbmRVc2VyKCdwYXZsby5rb2xvbW9pdHNldkBudXJlLnVhJyk7XG4gICAgICAgIGV4cGVjdChwYXZsbykudG9CZUluc3RhbmNlT2YodXNlcik7XG4gICAgICAgIG1vbmdvb3NlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgbW9uZ29vc2UuY29ubmVjdGlvbi5vbmNlKCdjbG9zZScpO1xuICAgICAgICBkb25lKCk7XG4gICAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==