70fb58bf2b2e7743fe467adbfb2be7f3
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_extended_1 = require("jest-mock-extended");
const user_controller_1 = require("../controllers/user.controller");
const mongoose = require('mongoose');
jest.setTimeout(10000);
describe('Testing user controller', () => {
    test('testing finding user', () => __awaiter(void 0, void 0, void 0, function* () {
        mongoose.connection.once('open', () => {
            console.log(`MongoDb connection established successfully`);
        })
            .on('error', () => {
            console.log('connection error');
        });
        const userController = new user_controller_1.UserController();
        const user = (0, jest_mock_extended_1.mock)();
        const pavlo = yield userController.findUser('6186fe32c5880ccea55d0473');
        expect(pavlo).toBeInstanceOf(user);
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FwcGxlL0Rlc2t0b3AvcGVyc29uYWwvdW5pL3Rlc3RpbmcvbGFiMi9zcmMvdGVzdHMvdXNlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsMkRBQTBDO0FBQzFDLG9FQUFnRTtBQUVoRSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDckMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUV2QixRQUFRLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxHQUFTLEVBQUU7UUFDcEMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtZQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDO2FBQ0csRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFFUCxNQUFNLGNBQWMsR0FBRyxJQUFJLGdDQUFjLEVBQUUsQ0FBQztRQUM1QyxNQUFNLElBQUksR0FBRyxJQUFBLHlCQUFJLEdBQVMsQ0FBQztRQUMzQixNQUFNLEtBQUssR0FBRyxNQUFNLGNBQWMsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYXBwbGUvRGVza3RvcC9wZXJzb25hbC91bmkvdGVzdGluZy9sYWIyL3NyYy90ZXN0cy91c2VyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVVzZXIgfSBmcm9tICcuLi90eXBlcy91c2VyLnR5cGVzJztcbmltcG9ydCB7IG1vY2sgfSBmcm9tICdqZXN0LW1vY2stZXh0ZW5kZWQnO1xuaW1wb3J0IHsgVXNlckNvbnRyb2xsZXIgfSBmcm9tICcuLi9jb250cm9sbGVycy91c2VyLmNvbnRyb2xsZXInO1xuXG5jb25zdCBtb25nb29zZSA9IHJlcXVpcmUoJ21vbmdvb3NlJyk7XG5qZXN0LnNldFRpbWVvdXQoMTAwMDApO1xuXG5kZXNjcmliZSgnVGVzdGluZyB1c2VyIGNvbnRyb2xsZXInLCAoKSA9PiB7XG4gICAgdGVzdCgndGVzdGluZyBmaW5kaW5nIHVzZXInLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIG1vbmdvb3NlLmNvbm5lY3Rpb24ub25jZSgnb3BlbicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBNb25nb0RiIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5YCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjb25uZWN0aW9uIGVycm9yJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB1c2VyQ29udHJvbGxlciA9IG5ldyBVc2VyQ29udHJvbGxlcigpO1xuICAgICAgICBjb25zdCB1c2VyID0gbW9jazxJVXNlcj4oKTtcbiAgICAgICAgY29uc3QgcGF2bG8gPSBhd2FpdCB1c2VyQ29udHJvbGxlci5maW5kVXNlcignNjE4NmZlMzJjNTg4MGNjZWE1NWQwNDczJyk7XG4gICAgICAgIGV4cGVjdChwYXZsbykudG9CZUluc3RhbmNlT2YodXNlcik7XG4gICAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==