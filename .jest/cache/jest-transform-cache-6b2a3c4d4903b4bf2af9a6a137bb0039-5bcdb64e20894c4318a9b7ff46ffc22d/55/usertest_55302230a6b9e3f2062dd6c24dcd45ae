6374bd9397bfd72ef4465d9d9462f5ea
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_extended_1 = require("jest-mock-extended");
const user_controller_1 = require("../controllers/user.controller");
const config_1 = require("../config");
const mongoose = require('mongoose');
describe('Testing user controller', () => {
    beforeEach(() => {
        jest.setTimeout(10000);
    });
    test('testing finding user', (done) => __awaiter(void 0, void 0, void 0, function* () {
        const MONGODB_LINK = config_1.config.MONGOOSE_LINK;
        mongoose.connect(MONGODB_LINK, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            useCreateIndex: true
        })
            .catch((err) => console.log(err));
        mongoose.connection.once('open', () => {
            console.log(`MongoDb connection established successfully`);
        })
            .on('error', () => {
            console.log('connection error');
        });
        const userController = new user_controller_1.UserController();
        const user = (0, jest_mock_extended_1.mock)();
        const pavlo = yield userController.findUser('6186fe32c5880ccea55d0473');
        console.log(pavlo);
        expect(pavlo).toBeInstanceOf(user);
        done();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FwcGxlL0Rlc2t0b3AvcGVyc29uYWwvdW5pL3Rlc3RpbmcvbGFiMi9zcmMvdGVzdHMvdXNlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsMkRBQTBDO0FBQzFDLG9FQUFnRTtBQUNoRSxzQ0FBbUM7QUFDbkMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRXJDLFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNaLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBTyxJQUFJLEVBQUUsRUFBRTtRQUN4QyxNQUFNLFlBQVksR0FBRyxlQUFNLENBQUMsYUFBYSxDQUFDO1FBRTFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzNCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGtCQUFrQixFQUFFLElBQUk7WUFDeEIsY0FBYyxFQUFFLElBQUk7U0FDdkIsQ0FBQzthQUNHLEtBQUssQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTNDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQzthQUNHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsTUFBTSxjQUFjLEdBQUcsSUFBSSxnQ0FBYyxFQUFFLENBQUM7UUFDNUMsTUFBTSxJQUFJLEdBQUcsSUFBQSx5QkFBSSxHQUFTLENBQUM7UUFDM0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDeEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQixNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksRUFBRSxDQUFDO0lBQ1gsQ0FBQyxDQUFBLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcHBsZS9EZXNrdG9wL3BlcnNvbmFsL3VuaS90ZXN0aW5nL2xhYjIvc3JjL3Rlc3RzL3VzZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJVXNlciB9IGZyb20gJy4uL3R5cGVzL3VzZXIudHlwZXMnO1xuaW1wb3J0IHsgbW9jayB9IGZyb20gJ2plc3QtbW9jay1leHRlbmRlZCc7XG5pbXBvcnQgeyBVc2VyQ29udHJvbGxlciB9IGZyb20gJy4uL2NvbnRyb2xsZXJzL3VzZXIuY29udHJvbGxlcic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuXG5kZXNjcmliZSgnVGVzdGluZyB1c2VyIGNvbnRyb2xsZXInLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIGplc3Quc2V0VGltZW91dCgxMDAwMCk7XG4gICAgfSk7XG4gICAgdGVzdCgndGVzdGluZyBmaW5kaW5nIHVzZXInLCBhc3luYyAoZG9uZSkgPT4ge1xuICAgICAgICBjb25zdCBNT05HT0RCX0xJTksgPSBjb25maWcuTU9OR09PU0VfTElOSztcblxuICAgICAgICBtb25nb29zZS5jb25uZWN0KE1PTkdPREJfTElOSywge1xuICAgICAgICAgICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxuICAgICAgICAgICAgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxuICAgICAgICAgICAgdXNlQ3JlYXRlSW5kZXg6IHRydWVcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycikpO1xuXG4gICAgICAgIG1vbmdvb3NlLmNvbm5lY3Rpb24ub25jZSgnb3BlbicsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBNb25nb0RiIGNvbm5lY3Rpb24gZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5YCk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2Vycm9yJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjb25uZWN0aW9uIGVycm9yJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgdXNlckNvbnRyb2xsZXIgPSBuZXcgVXNlckNvbnRyb2xsZXIoKTtcbiAgICAgICAgY29uc3QgdXNlciA9IG1vY2s8SVVzZXI+KCk7XG4gICAgICAgIGNvbnN0IHBhdmxvID0gYXdhaXQgdXNlckNvbnRyb2xsZXIuZmluZFVzZXIoJzYxODZmZTMyYzU4ODBjY2VhNTVkMDQ3MycpO1xuICAgICAgICBjb25zb2xlLmxvZyhwYXZsbyk7XG4gICAgICAgIGV4cGVjdChwYXZsbykudG9CZUluc3RhbmNlT2YodXNlcik7XG4gICAgICAgIGRvbmUoKTtcbiAgICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9