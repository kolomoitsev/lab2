{"file":"/Users/apple/Desktop/personal/uni/testing/lab2/src/controllers/user.controller.ts","mappings":";;;;;;;;;;;;AAEA,MAAM,SAAS,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AACpD,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAWjC,MAAa,cAAc;IACV,QAAQ,CAAC,SAAiB;;YACnC,OAAO,SAAS,CAAC,OAAO,CAAC;gBACrB,SAAS;aACZ,CAAC,CAAC;QACP,CAAC;KAAA;IAAA,CAAC;IAEW,cAAc,CAAC,IAAqB;;YAC7C,OAAO,SAAS,CAAC,gBAAgB,CAAC;gBAC9B,SAAS,EAAE,IAAI,CAAC,SAAS;aAC5B,EAAE;gBACC,YAAY,EAAE,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;aACzD,CAAC;iBACG,MAAM,CAAC,eAAe,CAAC,CAAC;QAEjC,CAAC;KAAA;IAEY,MAAM;;YACf,OAAO,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC;iBACpB,MAAM,CAAC,eAAe,CAAC,CAAC;QACjC,CAAC;KAAA;IAEY,YAAY;;QAEzB,CAAC;KAAA;IAEY,QAAQ,CAAC,IAAW;;YAE7B,IAAI,IAAI,GAAG,IAAI,SAAS,CAAC;gBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,YAAY,EAAE,MAAM,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;aACzD,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;YAClB,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAEvB,OAAO,IAAI,CAAC,YAAY,CAAC;YACzB,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;CACJ;AA1CD,wCA0CC","names":[],"sources":["/Users/apple/Desktop/personal/uni/testing/lab2/src/controllers/user.controller.ts"],"sourcesContent":["import { IChangePassword, IUser } from '../types/user.types';\n\nconst userModel = require('./../models/user.model');\nconst bCrypt = require('bcrypt');\n\n\ninterface IUserController {\n    findUser: (userEmail: string) => Promise<IUser>;\n    refreshToken: () => void;\n    register: (opts: IUser) => Promise<IUser>;\n    getAll: () => Promise<Array<IUser>>;\n    changePassword: (opts: IChangePassword) => Promise<IUser>;\n}\n\nexport class UserController implements IUserController {\n    public async findUser(userEmail: string): Promise<IUser> {\n        return userModel.findOne({\n            userEmail\n        });\n    };\n\n    public async changePassword(opts: IChangePassword): Promise<IUser> {\n        return userModel.findOneAndUpdate({\n            userEmail: opts.userEmail\n        }, {\n            userPassword: await bCrypt.hash(opts.userPassword, 10)\n        })\n            .select('-userPassword');\n\n    }\n\n    public async getAll(): Promise<Array<IUser>> {\n        return userModel.find({})\n            .select('-userPassword');\n    }\n\n    public async refreshToken(): Promise<void> {\n\n    }\n\n    public async register(opts: IUser): Promise<IUser> {\n\n        let user = new userModel({\n            userName: opts.userName,\n            userLastName: opts.userLastName,\n            userEmail: opts.userEmail,\n            userPhone: opts.userPhone,\n            userPassword: await bCrypt.hash(opts.userPassword, 10)\n        });\n\n        await user.save();\n        user = user.toObject();\n\n        delete user.userPassword;\n        return user;\n    }\n}\n"],"version":3}