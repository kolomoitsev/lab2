a7348a0870551489c1a0fb5503022235
"use strict";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

const jest_mock_extended_1 = require("jest-mock-extended");

const user_controller_1 = require("../controllers/user.controller");

const config_1 = require("../config");

const mongoose = require('mongoose');

jest.setTimeout(30000);
describe('Testing user controller', () => {
  it('testing finding user', done => __awaiter(void 0, void 0, void 0, function* () {
    const MONGODB_LINK = config_1.config.MONGOOSE_LINK;
    mongoose.connect(MONGODB_LINK, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    }).catch(err => console.log(err));
    mongoose.connection.once('open').on('error', () => {
      console.log('connection error');
    });
    const userController = new user_controller_1.UserController();
    const user = (0, jest_mock_extended_1.mock)();
    const pavlo = yield userController.findUser('pavlo.kolomoitsev@nure.ua');
    expect(pavlo).toBeInstanceOf(user);
    mongoose.disconnect();
    mongoose.connection.once('close');
    done();
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90ZXN0cy91c2VyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxNQUFBLG9CQUFBLEdBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUE7O0FBQ0EsTUFBQSxpQkFBQSxHQUFBLE9BQUEsQ0FBQSxnQ0FBQSxDQUFBOztBQUNBLE1BQUEsUUFBQSxHQUFBLE9BQUEsQ0FBQSxXQUFBLENBQUE7O0FBRUEsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQUQsQ0FBeEI7O0FBQ0EsSUFBSSxDQUFDLFVBQUwsQ0FBZ0IsS0FBaEI7QUFFQSxRQUFRLENBQUMseUJBQUQsRUFBNEIsTUFBSztBQUNyQyxFQUFBLEVBQUUsQ0FBQyxzQkFBRCxFQUFnQyxJQUFQLElBQWUsU0FBQSxDQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLEtBQUEsQ0FBQSxFQUFBLGFBQUE7QUFDdEMsVUFBTSxZQUFZLEdBQUcsUUFBQSxDQUFBLE1BQUEsQ0FBTyxhQUE1QjtBQUVBLElBQUEsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsWUFBakIsRUFBK0I7QUFDM0IsTUFBQSxlQUFlLEVBQUUsSUFEVTtBQUUzQixNQUFBLGtCQUFrQixFQUFFO0FBRk8sS0FBL0IsRUFJSyxLQUpMLENBSVksR0FBRCxJQUFjLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBWixDQUp6QjtBQU1BLElBQUEsUUFBUSxDQUFDLFVBQVQsQ0FBb0IsSUFBcEIsQ0FBeUIsTUFBekIsRUFDSyxFQURMLENBQ1EsT0FEUixFQUNpQixNQUFLO0FBQ2QsTUFBQSxPQUFPLENBQUMsR0FBUixDQUFZLGtCQUFaO0FBQ0gsS0FITDtBQUtBLFVBQU0sY0FBYyxHQUFHLElBQUksaUJBQUEsQ0FBQSxjQUFKLEVBQXZCO0FBQ0EsVUFBTSxJQUFJLEdBQUcsQ0FBQSxHQUFBLG9CQUFBLENBQUEsSUFBQSxHQUFiO0FBQ0EsVUFBTSxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUMsUUFBZixDQUF3QiwyQkFBeEIsQ0FBcEI7QUFDQSxJQUFBLE1BQU0sQ0FBQyxLQUFELENBQU4sQ0FBYyxjQUFkLENBQTZCLElBQTdCO0FBQ0EsSUFBQSxRQUFRLENBQUMsVUFBVDtBQUNBLElBQUEsUUFBUSxDQUFDLFVBQVQsQ0FBb0IsSUFBcEIsQ0FBeUIsT0FBekI7QUFDQSxJQUFBLElBQUk7QUFDUCxHQXJCeUMsQ0FBeEMsQ0FBRjtBQXNCSCxDQXZCTyxDQUFSIiwic291cmNlUm9vdCI6IiJ9