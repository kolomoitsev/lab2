1487d5a7602585530b18bbf8870cdf8d
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_extended_1 = require("jest-mock-extended");
const user_controller_1 = require("../controllers/user.controller");
const config_1 = require("../config");
const mongoose = require('mongoose');
jest.setTimeout(30000);
describe('Testing user controller', () => {
    it('testing finding user', (done) => __awaiter(void 0, void 0, void 0, function* () {
        const MONGODB_LINK = config_1.config.MONGOOSE_LINK;
        mongoose.connect(MONGODB_LINK, {
            useNewUrlParser: true,
            useUnifiedTopology: true
        })
            .catch((err) => console.log(err));
        mongoose.connection.once('open', () => {
            console.log(`MongoDb connection established successfully`);
        })
            .on('error', () => {
            console.log('connection error');
        });
        const userController = new user_controller_1.UserController();
        const user = (0, jest_mock_extended_1.mock)();
        const pavlo = yield userController.findUser('6186fe32c5880ccea55d0473');
        expect(pavlo).toBeInstanceOf(user);
        done();
    }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2FwcGxlL0Rlc2t0b3AvcGVyc29uYWwvdW5pL3Rlc3RpbmcvbGFiMi9zcmMvdGVzdHMvdXNlci50ZXN0LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQ0EsMkRBQTBDO0FBQzFDLG9FQUFnRTtBQUNoRSxzQ0FBbUM7QUFFbkMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3JDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFdkIsUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBTyxJQUFJLEVBQUUsRUFBRTtRQUN0QyxNQUFNLFlBQVksR0FBRyxlQUFNLENBQUMsYUFBYSxDQUFDO1FBRTFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzNCLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLGtCQUFrQixFQUFFLElBQUk7U0FDM0IsQ0FBQzthQUNHLEtBQUssQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQzthQUNHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO1FBRVAsTUFBTSxjQUFjLEdBQUcsSUFBSSxnQ0FBYyxFQUFFLENBQUM7UUFDNUMsTUFBTSxJQUFJLEdBQUcsSUFBQSx5QkFBSSxHQUFTLENBQUM7UUFDM0IsTUFBTSxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUMsUUFBUSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDeEUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJLEVBQUUsQ0FBQztJQUNYLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvYXBwbGUvRGVza3RvcC9wZXJzb25hbC91bmkvdGVzdGluZy9sYWIyL3NyYy90ZXN0cy91c2VyLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVVzZXIgfSBmcm9tICcuLi90eXBlcy91c2VyLnR5cGVzJztcbmltcG9ydCB7IG1vY2sgfSBmcm9tICdqZXN0LW1vY2stZXh0ZW5kZWQnO1xuaW1wb3J0IHsgVXNlckNvbnRyb2xsZXIgfSBmcm9tICcuLi9jb250cm9sbGVycy91c2VyLmNvbnRyb2xsZXInO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi4vY29uZmlnJztcblxuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKCdtb25nb29zZScpO1xuamVzdC5zZXRUaW1lb3V0KDMwMDAwKTtcblxuZGVzY3JpYmUoJ1Rlc3RpbmcgdXNlciBjb250cm9sbGVyJywgKCkgPT4ge1xuICAgIGl0KCd0ZXN0aW5nIGZpbmRpbmcgdXNlcicsIGFzeW5jIChkb25lKSA9PiB7XG4gICAgICAgIGNvbnN0IE1PTkdPREJfTElOSyA9IGNvbmZpZy5NT05HT09TRV9MSU5LO1xuXG4gICAgICAgIG1vbmdvb3NlLmNvbm5lY3QoTU9OR09EQl9MSU5LLCB7XG4gICAgICAgICAgICB1c2VOZXdVcmxQYXJzZXI6IHRydWUsXG4gICAgICAgICAgICB1c2VVbmlmaWVkVG9wb2xvZ3k6IHRydWVcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycikpO1xuICAgICAgICBtb25nb29zZS5jb25uZWN0aW9uLm9uY2UoJ29wZW4nLCAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgTW9uZ29EYiBjb25uZWN0aW9uIGVzdGFibGlzaGVkIHN1Y2Nlc3NmdWxseWApO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY29ubmVjdGlvbiBlcnJvcicpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgdXNlckNvbnRyb2xsZXIgPSBuZXcgVXNlckNvbnRyb2xsZXIoKTtcbiAgICAgICAgY29uc3QgdXNlciA9IG1vY2s8SVVzZXI+KCk7XG4gICAgICAgIGNvbnN0IHBhdmxvID0gYXdhaXQgdXNlckNvbnRyb2xsZXIuZmluZFVzZXIoJzYxODZmZTMyYzU4ODBjY2VhNTVkMDQ3MycpO1xuICAgICAgICBleHBlY3QocGF2bG8pLnRvQmVJbnN0YW5jZU9mKHVzZXIpO1xuICAgICAgICBkb25lKCk7XG4gICAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==