[["/Users/apple/Desktop/personal/uni/testing/lab2/src/tests/user.test.ts",{"fileContent":"import { validateUserEmail } from '../helpers/validation';\nimport { IUser } from '../types/user.types';\n\ndescribe('Testing user actions', () => {\n    test('testing prompted email', () => {\n        expect(validateUserEmail({\n            userEmail: 'pavlo.kolomoitsev@nure.ua',\n            userName: 'Pavlo',\n            userLastName: 'Kolomoitsev',\n            userPhone: '+380668750104'\n})).toBe(true);\n    });\n});\n","resolvedModuleNames":["/Users/apple/Desktop/personal/uni/testing/lab2/src/helpers/validation.ts","/Users/apple/Desktop/personal/uni/testing/lab2/src/types/user.types.ts","/Users/apple/Desktop/personal/uni/testing/lab2/src/controllers/user.controller.ts"]}],["/Users/apple/Desktop/personal/uni/testing/lab2/src/controllers/user.controller.ts",{"fileContent":"import { IChangePassword, IUser } from '../types/user.types';\n\nconst userModel = require('./../models/user.model');\nconst bCrypt = require('bcrypt');\n\n\ninterface IUserController {\n    findUser: (userEmail: string) => Promise<IUser>;\n    refreshToken: () => void;\n    register: (opts: IUser) => Promise<IUser>;\n    getAll: () => Promise<Array<IUser>>;\n    changePassword: (opts: IChangePassword) => Promise<IUser>;\n}\n\nexport class UserController implements IUserController {\n    public async findUser(userEmail: string): Promise<IUser> {\n        return userModel.findOne({\n            userEmail\n        });\n    };\n\n    public async changePassword(opts: IChangePassword): Promise<IUser> {\n        return userModel.findOneAndUpdate({\n            userEmail: opts.userEmail\n        }, {\n            userPassword: await bCrypt.hash(opts.userPassword, 10)\n        })\n            .select('-userPassword');\n\n    }\n\n    public async getAll(): Promise<Array<IUser>> {\n        return userModel.find({})\n            .select('-userPassword');\n    }\n\n    public async refreshToken(): Promise<void> {\n\n    }\n\n    public async register(opts: IUser): Promise<IUser> {\n\n        let user = new userModel({\n            userName: opts.userName,\n            userLastName: opts.userLastName,\n            userEmail: opts.userEmail,\n            userPhone: opts.userPhone,\n            userPassword: await bCrypt.hash(opts.userPassword, 10)\n        });\n\n        await user.save();\n        user = user.toObject();\n\n        delete user.userPassword;\n        return user;\n    }\n}\n","resolvedModuleNames":["/Users/apple/Desktop/personal/uni/testing/lab2/src/types/user.types.ts","/Users/apple/Desktop/personal/uni/testing/lab2/src/models/user.model.ts","/Users/apple/Desktop/personal/uni/testing/lab2/src/controllers/user.controller.ts"]}],["/Users/apple/Desktop/personal/uni/testing/lab2/src/models/user.model.ts",{"fileContent":"import { model, Schema } from 'mongoose';\nimport { IUser } from '../types/user.types';\n\nconst User = new Schema<IUser>(\n    {\n        userName: {\n            type: String,\n            required: true\n        },\n        userLastName: {\n            type: String,\n            required: true\n        },\n        userEmail: {\n            type: String,\n            unique: true,\n            required: true\n        },\n        userPhone: {\n            type: String,\n            unique: true,\n            required: true\n        },\n        userPassword: {\n            type: String,\n            required: true\n        }\n    },\n    {\n        timestamps: true\n    }\n);\n\nconst UserModel = model<IUser>('User', User);\n\nmodule.exports = UserModel;\n","resolvedModuleNames":["/Users/apple/Desktop/personal/uni/testing/lab2/src/types/user.types.ts","/Users/apple/Desktop/personal/uni/testing/lab2/src/controllers/user.controller.ts"]}],["/Users/apple/Desktop/personal/uni/testing/lab2/src/config.ts",{"fileContent":"export const config = {\n    MONGOOSE_LINK:\n        'mongodb+srv://kolomoitsev:HVZD4EdjqXNV6ihQ@cluster0.hnn0k.mongodb.net/uni',\n    jwt: {\n        secret: 'sigmatestkey',\n        tokens: {\n            access: {\n                type: 'access',\n                expiresIn: '2m'\n            },\n            refresh: {\n                type: 'refresh',\n                expiresIn: '5m'\n            }\n        }\n    }\n};\n","resolvedModuleNames":[]}],["/Users/apple/Desktop/personal/uni/testing/lab2/src/helpers/validation.ts",{"fileContent":"import { IUser } from \"../types/user.types\";\n\nexport const validateUserEmail = (opts: IUser): boolean => {\n    const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/gi;\n    return emailRegex.test(opts.userEmail);\n}","resolvedModuleNames":["/Users/apple/Desktop/personal/uni/testing/lab2/src/types/user.types.ts","/Users/apple/Desktop/personal/uni/testing/lab2/src/controllers/user.controller.ts"]}]]